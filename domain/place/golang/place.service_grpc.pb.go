// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: place.service.proto

package place

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaceServiceClient is the client API for PlaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaceServiceClient interface {
	QueryPlaceListBySquare(ctx context.Context, in *QueryPlaceListBySquareRequest, opts ...grpc.CallOption) (*QueryPlaceListBySquareResponse, error)
	QueryPlaceListByRadius(ctx context.Context, in *QueryPlaceListByRadiusRequest, opts ...grpc.CallOption) (*QueryPlaceListByRadiusResponse, error)
	CreatePlace(ctx context.Context, in *CreatePlaceRequest, opts ...grpc.CallOption) (*CreatePlaceResponse, error)
	CreatePlaceList(ctx context.Context, in *CreatePlaceListRequest, opts ...grpc.CallOption) (*CreatePlaceListResponse, error)
	ReadPlace(ctx context.Context, in *ReadPlaceRequest, opts ...grpc.CallOption) (*ReadPlaceResponse, error)
	ReadPlaceList(ctx context.Context, in *ReadPlaceListRequest, opts ...grpc.CallOption) (*ReadPlaceListResponse, error)
	UpdatePlace(ctx context.Context, in *UpdatePlaceRequest, opts ...grpc.CallOption) (*UpdatePlaceResponse, error)
	UpdatePlaceList(ctx context.Context, in *UpdatePlaceListRequest, opts ...grpc.CallOption) (*UpdatePlaceListResponse, error)
	DeletePlace(ctx context.Context, in *DeletePlaceRequest, opts ...grpc.CallOption) (*DeletePlaceResponse, error)
	DeletePlaceList(ctx context.Context, in *DeletePlaceListRequest, opts ...grpc.CallOption) (*DeletePlaceListResponse, error)
}

type placeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaceServiceClient(cc grpc.ClientConnInterface) PlaceServiceClient {
	return &placeServiceClient{cc}
}

func (c *placeServiceClient) QueryPlaceListBySquare(ctx context.Context, in *QueryPlaceListBySquareRequest, opts ...grpc.CallOption) (*QueryPlaceListBySquareResponse, error) {
	out := new(QueryPlaceListBySquareResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/QueryPlaceListBySquare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) QueryPlaceListByRadius(ctx context.Context, in *QueryPlaceListByRadiusRequest, opts ...grpc.CallOption) (*QueryPlaceListByRadiusResponse, error) {
	out := new(QueryPlaceListByRadiusResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/QueryPlaceListByRadius", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) CreatePlace(ctx context.Context, in *CreatePlaceRequest, opts ...grpc.CallOption) (*CreatePlaceResponse, error) {
	out := new(CreatePlaceResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/CreatePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) CreatePlaceList(ctx context.Context, in *CreatePlaceListRequest, opts ...grpc.CallOption) (*CreatePlaceListResponse, error) {
	out := new(CreatePlaceListResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/CreatePlaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) ReadPlace(ctx context.Context, in *ReadPlaceRequest, opts ...grpc.CallOption) (*ReadPlaceResponse, error) {
	out := new(ReadPlaceResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/ReadPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) ReadPlaceList(ctx context.Context, in *ReadPlaceListRequest, opts ...grpc.CallOption) (*ReadPlaceListResponse, error) {
	out := new(ReadPlaceListResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/ReadPlaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) UpdatePlace(ctx context.Context, in *UpdatePlaceRequest, opts ...grpc.CallOption) (*UpdatePlaceResponse, error) {
	out := new(UpdatePlaceResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/UpdatePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) UpdatePlaceList(ctx context.Context, in *UpdatePlaceListRequest, opts ...grpc.CallOption) (*UpdatePlaceListResponse, error) {
	out := new(UpdatePlaceListResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/UpdatePlaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) DeletePlace(ctx context.Context, in *DeletePlaceRequest, opts ...grpc.CallOption) (*DeletePlaceResponse, error) {
	out := new(DeletePlaceResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/DeletePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) DeletePlaceList(ctx context.Context, in *DeletePlaceListRequest, opts ...grpc.CallOption) (*DeletePlaceListResponse, error) {
	out := new(DeletePlaceListResponse)
	err := c.cc.Invoke(ctx, "/place.PlaceService/DeletePlaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaceServiceServer is the server API for PlaceService service.
// All implementations must embed UnimplementedPlaceServiceServer
// for forward compatibility
type PlaceServiceServer interface {
	QueryPlaceListBySquare(context.Context, *QueryPlaceListBySquareRequest) (*QueryPlaceListBySquareResponse, error)
	QueryPlaceListByRadius(context.Context, *QueryPlaceListByRadiusRequest) (*QueryPlaceListByRadiusResponse, error)
	CreatePlace(context.Context, *CreatePlaceRequest) (*CreatePlaceResponse, error)
	CreatePlaceList(context.Context, *CreatePlaceListRequest) (*CreatePlaceListResponse, error)
	ReadPlace(context.Context, *ReadPlaceRequest) (*ReadPlaceResponse, error)
	ReadPlaceList(context.Context, *ReadPlaceListRequest) (*ReadPlaceListResponse, error)
	UpdatePlace(context.Context, *UpdatePlaceRequest) (*UpdatePlaceResponse, error)
	UpdatePlaceList(context.Context, *UpdatePlaceListRequest) (*UpdatePlaceListResponse, error)
	DeletePlace(context.Context, *DeletePlaceRequest) (*DeletePlaceResponse, error)
	DeletePlaceList(context.Context, *DeletePlaceListRequest) (*DeletePlaceListResponse, error)
	mustEmbedUnimplementedPlaceServiceServer()
}

// UnimplementedPlaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaceServiceServer struct {
}

func (UnimplementedPlaceServiceServer) QueryPlaceListBySquare(context.Context, *QueryPlaceListBySquareRequest) (*QueryPlaceListBySquareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlaceListBySquare not implemented")
}
func (UnimplementedPlaceServiceServer) QueryPlaceListByRadius(context.Context, *QueryPlaceListByRadiusRequest) (*QueryPlaceListByRadiusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlaceListByRadius not implemented")
}
func (UnimplementedPlaceServiceServer) CreatePlace(context.Context, *CreatePlaceRequest) (*CreatePlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlace not implemented")
}
func (UnimplementedPlaceServiceServer) CreatePlaceList(context.Context, *CreatePlaceListRequest) (*CreatePlaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaceList not implemented")
}
func (UnimplementedPlaceServiceServer) ReadPlace(context.Context, *ReadPlaceRequest) (*ReadPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPlace not implemented")
}
func (UnimplementedPlaceServiceServer) ReadPlaceList(context.Context, *ReadPlaceListRequest) (*ReadPlaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPlaceList not implemented")
}
func (UnimplementedPlaceServiceServer) UpdatePlace(context.Context, *UpdatePlaceRequest) (*UpdatePlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlace not implemented")
}
func (UnimplementedPlaceServiceServer) UpdatePlaceList(context.Context, *UpdatePlaceListRequest) (*UpdatePlaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaceList not implemented")
}
func (UnimplementedPlaceServiceServer) DeletePlace(context.Context, *DeletePlaceRequest) (*DeletePlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlace not implemented")
}
func (UnimplementedPlaceServiceServer) DeletePlaceList(context.Context, *DeletePlaceListRequest) (*DeletePlaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlaceList not implemented")
}
func (UnimplementedPlaceServiceServer) mustEmbedUnimplementedPlaceServiceServer() {}

// UnsafePlaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaceServiceServer will
// result in compilation errors.
type UnsafePlaceServiceServer interface {
	mustEmbedUnimplementedPlaceServiceServer()
}

func RegisterPlaceServiceServer(s grpc.ServiceRegistrar, srv PlaceServiceServer) {
	s.RegisterService(&PlaceService_ServiceDesc, srv)
}

func _PlaceService_QueryPlaceListBySquare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlaceListBySquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).QueryPlaceListBySquare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/QueryPlaceListBySquare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).QueryPlaceListBySquare(ctx, req.(*QueryPlaceListBySquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_QueryPlaceListByRadius_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlaceListByRadiusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).QueryPlaceListByRadius(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/QueryPlaceListByRadius",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).QueryPlaceListByRadius(ctx, req.(*QueryPlaceListByRadiusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_CreatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).CreatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/CreatePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).CreatePlace(ctx, req.(*CreatePlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_CreatePlaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).CreatePlaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/CreatePlaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).CreatePlaceList(ctx, req.(*CreatePlaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_ReadPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).ReadPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/ReadPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).ReadPlace(ctx, req.(*ReadPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_ReadPlaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPlaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).ReadPlaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/ReadPlaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).ReadPlaceList(ctx, req.(*ReadPlaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_UpdatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).UpdatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/UpdatePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).UpdatePlace(ctx, req.(*UpdatePlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_UpdatePlaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).UpdatePlaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/UpdatePlaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).UpdatePlaceList(ctx, req.(*UpdatePlaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_DeletePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).DeletePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/DeletePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).DeletePlace(ctx, req.(*DeletePlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_DeletePlaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).DeletePlaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/place.PlaceService/DeletePlaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).DeletePlaceList(ctx, req.(*DeletePlaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaceService_ServiceDesc is the grpc.ServiceDesc for PlaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "place.PlaceService",
	HandlerType: (*PlaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPlaceListBySquare",
			Handler:    _PlaceService_QueryPlaceListBySquare_Handler,
		},
		{
			MethodName: "QueryPlaceListByRadius",
			Handler:    _PlaceService_QueryPlaceListByRadius_Handler,
		},
		{
			MethodName: "CreatePlace",
			Handler:    _PlaceService_CreatePlace_Handler,
		},
		{
			MethodName: "CreatePlaceList",
			Handler:    _PlaceService_CreatePlaceList_Handler,
		},
		{
			MethodName: "ReadPlace",
			Handler:    _PlaceService_ReadPlace_Handler,
		},
		{
			MethodName: "ReadPlaceList",
			Handler:    _PlaceService_ReadPlaceList_Handler,
		},
		{
			MethodName: "UpdatePlace",
			Handler:    _PlaceService_UpdatePlace_Handler,
		},
		{
			MethodName: "UpdatePlaceList",
			Handler:    _PlaceService_UpdatePlaceList_Handler,
		},
		{
			MethodName: "DeletePlace",
			Handler:    _PlaceService_DeletePlace_Handler,
		},
		{
			MethodName: "DeletePlaceList",
			Handler:    _PlaceService_DeletePlaceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "place.service.proto",
}
