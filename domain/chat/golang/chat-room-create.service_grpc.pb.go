// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: chat-room-create.service.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatRoomCreateServiceClient is the client API for ChatRoomCreateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomCreateServiceClient interface {
	CreateChatRoom(ctx context.Context, in *CreateChatRoomRequest, opts ...grpc.CallOption) (*CreateChatRoomResponse, error)
}

type chatRoomCreateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomCreateServiceClient(cc grpc.ClientConnInterface) ChatRoomCreateServiceClient {
	return &chatRoomCreateServiceClient{cc}
}

func (c *chatRoomCreateServiceClient) CreateChatRoom(ctx context.Context, in *CreateChatRoomRequest, opts ...grpc.CallOption) (*CreateChatRoomResponse, error) {
	out := new(CreateChatRoomResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatRoomCreateService/CreateChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomCreateServiceServer is the server API for ChatRoomCreateService service.
// All implementations must embed UnimplementedChatRoomCreateServiceServer
// for forward compatibility
type ChatRoomCreateServiceServer interface {
	CreateChatRoom(context.Context, *CreateChatRoomRequest) (*CreateChatRoomResponse, error)
	mustEmbedUnimplementedChatRoomCreateServiceServer()
}

// UnimplementedChatRoomCreateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomCreateServiceServer struct {
}

func (UnimplementedChatRoomCreateServiceServer) CreateChatRoom(context.Context, *CreateChatRoomRequest) (*CreateChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRoom not implemented")
}
func (UnimplementedChatRoomCreateServiceServer) mustEmbedUnimplementedChatRoomCreateServiceServer() {}

// UnsafeChatRoomCreateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomCreateServiceServer will
// result in compilation errors.
type UnsafeChatRoomCreateServiceServer interface {
	mustEmbedUnimplementedChatRoomCreateServiceServer()
}

func RegisterChatRoomCreateServiceServer(s grpc.ServiceRegistrar, srv ChatRoomCreateServiceServer) {
	s.RegisterService(&ChatRoomCreateService_ServiceDesc, srv)
}

func _ChatRoomCreateService_CreateChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomCreateServiceServer).CreateChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatRoomCreateService/CreateChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomCreateServiceServer).CreateChatRoom(ctx, req.(*CreateChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoomCreateService_ServiceDesc is the grpc.ServiceDesc for ChatRoomCreateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoomCreateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatRoomCreateService",
	HandlerType: (*ChatRoomCreateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatRoom",
			Handler:    _ChatRoomCreateService_CreateChatRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat-room-create.service.proto",
}
