// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: chat-room-delete.service.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatRoomDeleteServiceClient is the client API for ChatRoomDeleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomDeleteServiceClient interface {
	DeleteChatRoom(ctx context.Context, in *DeleteChatRoomRequest, opts ...grpc.CallOption) (*DeleteChatRoomResponse, error)
}

type chatRoomDeleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomDeleteServiceClient(cc grpc.ClientConnInterface) ChatRoomDeleteServiceClient {
	return &chatRoomDeleteServiceClient{cc}
}

func (c *chatRoomDeleteServiceClient) DeleteChatRoom(ctx context.Context, in *DeleteChatRoomRequest, opts ...grpc.CallOption) (*DeleteChatRoomResponse, error) {
	out := new(DeleteChatRoomResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatRoomDeleteService/DeleteChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomDeleteServiceServer is the server API for ChatRoomDeleteService service.
// All implementations must embed UnimplementedChatRoomDeleteServiceServer
// for forward compatibility
type ChatRoomDeleteServiceServer interface {
	DeleteChatRoom(context.Context, *DeleteChatRoomRequest) (*DeleteChatRoomResponse, error)
	mustEmbedUnimplementedChatRoomDeleteServiceServer()
}

// UnimplementedChatRoomDeleteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomDeleteServiceServer struct {
}

func (UnimplementedChatRoomDeleteServiceServer) DeleteChatRoom(context.Context, *DeleteChatRoomRequest) (*DeleteChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatRoom not implemented")
}
func (UnimplementedChatRoomDeleteServiceServer) mustEmbedUnimplementedChatRoomDeleteServiceServer() {}

// UnsafeChatRoomDeleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomDeleteServiceServer will
// result in compilation errors.
type UnsafeChatRoomDeleteServiceServer interface {
	mustEmbedUnimplementedChatRoomDeleteServiceServer()
}

func RegisterChatRoomDeleteServiceServer(s grpc.ServiceRegistrar, srv ChatRoomDeleteServiceServer) {
	s.RegisterService(&ChatRoomDeleteService_ServiceDesc, srv)
}

func _ChatRoomDeleteService_DeleteChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomDeleteServiceServer).DeleteChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatRoomDeleteService/DeleteChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomDeleteServiceServer).DeleteChatRoom(ctx, req.(*DeleteChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoomDeleteService_ServiceDesc is the grpc.ServiceDesc for ChatRoomDeleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoomDeleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatRoomDeleteService",
	HandlerType: (*ChatRoomDeleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteChatRoom",
			Handler:    _ChatRoomDeleteService_DeleteChatRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat-room-delete.service.proto",
}
